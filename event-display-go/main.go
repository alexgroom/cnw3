/*
Copyright 2019 The Knative Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"context"
	"fmt"
	"log"
  "strings"
  "net/http"
  "os"

	cloudevents "github.com/cloudevents/sdk-go"
	"knative.dev/eventing/pkg/kncloudevents"
)

/*
Example Output:
☁  cloudevents.Event:
Validation: valid
Context Attributes,
  SpecVersion: 0.2
  Type: dev.knative.eventing.samples.heartbeat
  Source: https://knative.dev/eventing-contrib/cmd/heartbeats/#local/demo
  ID: 3d2b5a1f-10ca-437b-a374-9c49e43c02fb
  Time: 2019-03-14T21:21:29.366002Z
  ContentType: application/json
  Extensions:
    the: 42
    beats: true
    heart: yes
Transport Context,
  URI: /
  Host: localhost:8080
  Method: POST
Data,
  {
    "id":162,
    "label":""
  }
*/

var sink string
var search string


func display(event cloudevents.Event) {
  // look for events that have a subject containing web- app name
  // this assumes the web server has web in its title
  if strings.Contains(event.Subject(), search) {
    // we are looking for a format of appname-revision.id to then use in an event Trigger
    // there are longer events that we don't want which are in the form appname-revision-deployment-id
    if strings.Count(event.Subject(), "-") <3 {
      fmt.Printf("\nFound subject: %s\n", event.Subject())
      fmt.Printf("☁️  cloudevents.Event\n%s", event.String())
      sendEvent()
    }
    // leave this so we know we are recieving events
    fmt.Printf(".");
  }
}


// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl "http://broker-ingress.knative-eventing.svc.cluster.local/my-project1/default" -X POST  -H "Ce-Id: wakeup" -H "Ce-Specversion: 1.0" -H "Ce-Type: web-wakeup" -H "Ce-Source: web-coolstore" -H "Content-Type: application/json" -d '{"msg":"Hello knative!"}'
//

func sendEvent() {

  req, err := http.NewRequest("POST", sink, nil)
  if err != nil {
    // handle err
    fmt.Printf("Error with request %s\n", err);
  }
  req.Header.Set("Ce-Id", "wakeup")
  req.Header.Set("Ce-Specversion", "1.0")
  req.Header.Set("Ce-Type", "web-wakeup")
  req.Header.Set("Ce-Source", "web-coolstore")
  req.Header.Set("Content-Type", "application/json")

  resp, err := http.DefaultClient.Do(req)

  if err != nil {
    // handle err
    fmt.Printf("Error with closing response %s\n", err);
  }
  defer resp.Body.Close()
}

func main() {

  // check environment for config
  sink = os.Getenv("K_SINK")
  if (sink != ""){
    sink = "http://broker-ingress.knative-eventing.svc.cluster.local/agcoolserve3/default"
  }
  search = os.Getenv("SEARCH")
  if (search != ""){
    search = "web-"
  }
  fmt.Printf("Found env K_SINK %s\n", sink);
  fmt.Printf("Found env SEARCH %s\n", search);

	c, err := kncloudevents.NewDefaultClient()
	if err != nil {
		log.Fatal("Failed to create client, ", err)
	}

	log.Fatal(c.StartReceiver(context.Background(), display))
}